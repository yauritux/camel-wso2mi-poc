<?xml version="1.0" encoding="UTF-8"?>
<api context="/api/v1/games" name="ChessGames" xmlns="http://ws.apache.org/ns/synapse">
    <resource methods="GET" uri-template="/">
        <inSequence>
            <call description="Fetch Chess Game Players">
                <endpoint key="fetchChessPlayers" />
            </call>
            <payloadFactory media-type="json" template-type="default">
                <format>$1</format>
                <args>
                    <arg expression="$.players" evaluator="json" />
                </args>
            </payloadFactory>
            <enrich description="">
                <source clone="true" type="body" />
                <target action="replace" type="property" property="transformedResponse" />
            </enrich>
            <script language="js"><![CDATA[var responsePayload = JSON.parse(mc.getProperty("transformedResponse"));
var characters = 'abcdefghijklmnopqrstuvwxyz';
var randomChar = characters.charAt(Math.floor(Math.random() * characters.length));
var filteredResponse = null;
for (var i = 0; i < responsePayload.length; i++) {
   if (responsePayload[i].startsWith(randomChar)) {
       filteredResponse = responsePayload[i];
       break;
   }
}
if (filteredResponse != null) {
   mc.setPayloadJSON(filteredResponse);
} else {
   mc.setPayloadJSON("");
}
mc.setProperty("filteredResponse", filteredResponse);
var filteredPlayer = filteredResponse.replace(/"/g, '');
mc.setProperty("filteredPlayer", filteredPlayer)
mc.setProperty("filteredPlayerType", typeof filteredPlayer);
]]></script>
            <log category="INFO" level="custom">
                <property name="selectedPlayer" expression="get-property('filteredPlayer')" />
                <property name="selectedPlayerType"
                    expression="get-property('filteredPlayerType')" />
            </log>
            <property name="uri.var.username" scope="default" type="STRING"
                expression="fn:concat('', get-property('filteredPlayer'))" />
            <log category="INFO" level="custom">
                <property name="playerSummaryUrl"
                    expression="fn:concat('https://api.chess.com/pub/player/', get-property('uri.var.username'), '/stats')" />
            </log>
            <call>
                <endpoint>
                    <http method="GET"
                        uri-template="https://api.chess.com/pub/player/{uri.var.username}/stats" />
                </endpoint>
            </call>
            <payloadFactory media-type="json" template-type="default">
                <format>{
                    "username": "$1", "game_statistic": $2 }</format>
                <args>
                    <arg expression="get-property('uri.var.username')" evaluator="xml" />
                    <arg expression="$.*" evaluator="json" />
                </args>
            </payloadFactory>
            <log category="INFO" level="custom">
                <property name="insertedResponse" expression="get-property('filteredResponse')" />
            </log>
            <dbreport>
                <connection>
                    <pool>
                        <driver>org.postgresql.Driver</driver>
                        <url>jdbc:postgresql://localhost:5432/eipoc</url>
                        <user>postgres</user>
                        <password>tux123</password>
                    </pool>
                </connection>
                <statement>
                    <sql>INSERT INTO wso2mi_write_db (data) VALUES (?::json)</sql>
                    <parameter expression="json-eval($.)" type="VARCHAR"/>
                </statement>
            </dbreport>            
            <kafkaTransport.publishMessages configKey="KafkaConnection">
                <keySchemaSoftDeleted>false</keySchemaSoftDeleted>
                <valueSchemaSoftDeleted>false</valueSchemaSoftDeleted>
                <topic>wso2_chess_player</topic>
                <partitionNo>0</partitionNo>
            </kafkaTransport.publishMessages>
            <respond description="Player Summary" />
        </inSequence>
        <faultSequence>
        </faultSequence>
    </resource>
</api>