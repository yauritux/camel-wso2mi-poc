- beans:
    - name: randomCharBean
      type: link.yauritux.RandomCharBean
- route:
    id: route-chess-player
    from:
      id: from-9588
      uri: rest
      parameters:
        method: get
        path: /api/v1/games
      steps:
        - bean:
            method: generateRandomChar
            ref: randomCharBean
        - setHeader:
            name: randomChar
            simple: ${body}
        - log:
            message: "Generated random character: ${header.randomChar}"
        - setHeader:
            name: User-Agent
            constant: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36
        - setHeader:
            name: Accept
            constant: application/json
        - setHeader:
            name: Content-Type
            constant: application/json
        - setHeader:
            name: Referer
            constant: https://chess.com
        - toD:
            id: to-4055
            uri: https://api.chess.com/pub/titled/GM
            parameters:
              bridgeEndpoint: true
              throwExceptionOnFailure: false
              httpMethod: GET
              copyHeaders: false
        - log:
            message: "Response headers: ${headers}"
        - log:
            message: "received response: ${body}"
        - log:
            message: "Raw response bytes: ${bodyAs(byte[])}"
        - transform:
            id: transform-1657
            expression:
              jsonpath:
                expression: $.players
        - script:
            expression:
              js:
                expression: >-
                  var randomChar = exchange.getIn().getHeader("randomChar");

                  var body = exchange.getIn().getBody();

                  exchange.getIn().setHeader("rawBody", JSON.stringify(body));

                  var jsonResponse = body;

                  if (typeof body === 'string') {
                    try {
                      jsonResponse = JSON.parse(body);
                      exchange.getIn().setHeader("parsedBody", JSON.stringify(jsonResponse));
                    } catch (e) {
                      exchange.getIn().setHeader("errorParsing", "Error parsing JSON");
                      throw e;
                    }
                  }                  

                  var players = jsonResponse; var selectedPlayer = "tux";

                  for (var i = 0; i < players.length; i++) {
                    if (players[i].startsWith(randomChar)) {
                      selectedPlayer = players[i];
                      break;
                    }
                  }

                  exchange.getIn().setHeader("selectedPlayer", selectedPlayer);
        - log:
            message: "selected player: ${header.selectedPlayer}"
        - setHeader:
            constant: application/json
            name: Accept
        - doTry:
            steps:
              - toD:
                  uri: https://api.chess.com/pub/player/${header.selectedPlayer}/stats
              - log:
                  message: "Player stats response: ${body}"
            doCatch:
              - exception:
                  - org.apache.camel.http.base.HttpOperationFailedException
                onWhen:
                  simple: "${exception.responseCode} == 429"
                steps:
                  - loop:
                      simple: "1"
                      steps:
                        - log:
                            message: "Retry attempt: ${exchangeProperty.CamelLoopIndex + 1}"
                        - delay:
                            constant: "1000"
                        - toD:
                            uri: https://api.chess.com/pub/player/${header.selectedPlayer}/stats?throwExceptionOnFailure=true
                        - log:
                            message: "Successful response after retry: ${body}"
                  - log:
                      message: "Retries exhausted. Failed to get response after 2 attempts."
            doFinally:
              steps: []          
        - log:
            message: "Final response body: ${body}"
        - to:
            id: to-kafka
            uri: kafka
            parameters:
              brokers: localhost:9094,localhost:9194,localhost:9294
              topic: chess_player
