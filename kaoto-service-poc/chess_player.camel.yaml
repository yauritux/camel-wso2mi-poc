- beans:
    - name: randomCharBean
      type: link.yauritux.RandomCharBean
- route:
    id: route-chess-player
    from:
      id: from-9588
      uri: rest
      parameters:
        method: get
        path: /
      steps:
        - bean:
            method: generateRandomChar
            ref: randomCharBean
        - setHeader:
            name: randomChar
            simple: ${body}
        - log:
            message: "Generated random character: ${header.randomChar}"
        - setHeader:
            constant: application/json
            name: Accept
        - setHeader:
            name: Content-Type
            constant: application/json
        - to:
            id: to-4055
            uri: https://api.chess.com/pub/titled/GM?bridgeEndpoint=true&throwExceptionOnFailure=false&followRedirects=true
        - log:
            message: "received response: ${body}"
        - transform:
            id: transform-1657
            expression:
              jsonpath:
                expression: $.players
        - script:
            expression:
              js:
                expression: >-
                  var randomChar = exchange.getIn().getHeader("randomChar");

                  var body = exchange.getIn().getBody();

                  exchange.getIn().setHeader("rawBody", JSON.stringify(body));

                  var jsonResponse = body;

                  if (typeof body === 'string') {
                    try {
                      jsonResponse = JSON.parse(body);
                      exchange.getIn().setHeader("parsedBody", JSON.stringify(jsonResponse));
                    } catch (e) {
                      exchange.getIn().setHeader("errorParsing", "Error parsing JSON");
                      throw e;
                    }
                  }                  

                  var players = jsonResponse; var selectedPlayer = "tux";

                  for (var i = 0; i < players.length; i++) {
                    if (players[i].startsWith(randomChar)) {
                      selectedPlayer = players[i];
                      break;
                    }
                  }

                  exchange.getIn().setHeader("selectedPlayer", selectedPlayer);
        - log:
            message: "selected player: ${header.selectedPlayer}"
        - setHeader:
            constant: application/json
            name: Accept
        - doTry:
            id: doTry-2941
            steps:
              - toD:
                  id: to-3058
                  uri: https://api.chess.com/pub/player/${header.selectedPlayer}/stats?bridgeEndpoint=true&throwExceptionOnFailure=false&followRedirects=true
              - log:
                  message: "Player stats response: ${body}"
              - setBody:
                  simple: |
                    {
                      "username": "${header.selectedPlayer}",
                      "game_statistic": "${body}"
                    }
            doCatch:
              - id: doCatch-3781
                steps:
                  - delay:
                      constant: "1000"
                  - toD:
                      id: to-3839
                      uri: https://api.chess.com/pub/player/${header.selectedPlayer}/stats?bridgeEndpoint=true&throwExceptionOnFailure=false&followRedirects=true
                exception:
                  - org.apache.camel.http.base.HttpOperationFailedException
                onWhen:
                  simple: "${exception.responseCode} == 429"
            doFinally:
              id: doFinally-2720
              steps: []
        - log:
            message: "Final response body: ${body}"
        - to:
            id: to-kafka
            uri: kafka
            parameters:
              brokers: localhost:9094,localhost:9194,localhost:9294
              topic: chess_player
